.Dd April 23, 2014
.Dt libagdb 3
.Os libagdb
.Sh NAME
.Nm libagdb.h
.Nd Library to access the Windows SuperFetch database file format
.Sh LIBRARY
.Lb libagdb
.Sh SYNOPSIS
.In libagdb.h
.Pp
Support functions
.Ft const char *
.Fn libagdb_get_version "void"
.Ft int
.Fn libagdb_get_access_flags_read
.Ft int
.Fn libagdb_get_codepage "int *codepage, libagdb_error_t **error"
.Ft int
.Fn libagdb_set_codepage "int codepage, libagdb_error_t **error"
.Ft int
.Fn libagdb_check_file_signature "const char *filename, libagdb_error_t **error"
.Pp
Available when compiled with wide character string support:
.Ft int
.Fn libagdb_check_file_signature_wide "const wchar_t *filename, libagdb_error_t **error"
.Pp
Available when compiled with libbfio support:
.Ft int
.Fn libagdb_check_file_signature_file_io_handle "libbfio_handle_t *file_io_handle, libagdb_error_t **error"
.Pp
Notify functions
.Ft void
.Fn libagdb_notify_set_verbose "int verbose"
.Ft int
.Fn libagdb_notify_set_stream "FILE *stream, libagdb_error_t **error"
.Ft int
.Fn libagdb_notify_stream_open "const char *filename, libagdb_error_t **error"
.Ft int
.Fn libagdb_notify_stream_close "libagdb_error_t **error"
.Pp
Error functions
.Ft void 
.Fn libagdb_error_free "libagdb_error_t **error"
.Ft int
.Fn libagdb_error_fprint "libagdb_error_t *error, FILE *stream"
.Ft int
.Fn libagdb_error_sprint "libagdb_error_t *error, char *string, size_t size"
.Ft int 
.Fn libagdb_error_backtrace_fprint "libagdb_error_t *error, FILE *stream"
.Ft int
.Fn libagdb_error_backtrace_sprint "libagdb_error_t *error, char *string, size_t size"
.Pp
File functions
.Ft int
.Fn libagdb_file_initialize "libagdb_file_t **file, libagdb_error_t **error"
.Ft int
.Fn libagdb_file_free "libagdb_file_t **file, libagdb_error_t **error"
.Ft int
.Fn libagdb_file_open "libagdb_file_t *file, const char *filename, int access_flags, libagdb_error_t **error"
.Ft int
.Fn libagdb_file_close "libagdb_file_t *file, libagdb_error_t **error"
.Ft int
.Fn libagdb_file_get_number_of_volumes "libagdb_file_t *file, int *number_of_volumes, libagdb_error_t **error"
.Ft int
.Fn libagdb_file_get_volume_information "libagdb_file_t *file, int volume_index, libagdb_volume_information_t **volume_information, libagdb_error_t **error"
.Ft int
.Fn libagdb_file_get_number_of_executables "libagdb_file_t *file, int *number_of_executables, libagdb_error_t **error"
.Ft int
.Fn libagdb_file_get_executable_information "libagdb_file_t *file, int executable_index, libagdb_executable_information_t **executable_information, libagdb_error_t **error"
.Pp
Available when compiled with wide character string support:
.Ft int
.Fn libagdb_file_open_wide "libagdb_file_t *file, const wchar_t *filename, int access_flags, libagdb_error_t **error"
.Pp
Available when compiled with libbfio support:
.Ft int
.Fn libagdb_file_open_file_io_handle "libagdb_file_t *file, libbfio_handle_t *file_io_handle, int access_flags, libagdb_error_t **error"
.PP
Volume information functions
.Ft int
.Fn libagdb_volume_information_free "libagdb_volume_information_t **volume_information, libagdb_error_t **error"
.Ft int
.Fn libagdb_volume_information_get_creation_time "libagdb_volume_information_t *volume_information, uint64_t *creation_time, libagdb_error_t **error"
.Ft int
.Fn libagdb_volume_information_get_serial_number "libagdb_volume_information_t *volume_information, uint32_t *serial_number, libagdb_error_t **error"
.Ft int
.Fn libagdb_volume_information_get_utf8_device_path_size "libagdb_volume_information_t *volume_information, size_t *utf8_string_size, libagdb_error_t **error"
.Ft int
.Fn libagdb_volume_information_get_utf8_device_path "libagdb_volume_information_t *volume_information, uint8_t *utf8_string, size_t utf8_string_size, libagdb_error_t **error"
.Ft int
.Fn libagdb_volume_information_get_utf16_device_path_size "libagdb_volume_information_t *volume_information, size_t *utf16_string_size, libagdb_error_t **error"
.Ft int
.Fn libagdb_volume_information_get_utf16_device_path "libagdb_volume_information_t *volume_information, uint16_t *utf16_string, size_t utf16_string_size, libagdb_error_t **error"
.PP
Executable information functions
.Ft int
.Fn libagdb_executable_information_free "libagdb_executable_information_t **executable_information, libagdb_error_t **error"
.Sh DESCRIPTION
The
.Fn libagdb_get_version
function is used to retrieve the library version.
.Sh RETURN VALUES
Most of the functions return NULL or \-1 on error, dependent on the return type. For the actual return values refer to libagdb.h
.Sh ENVIRONMENT
None
.Sh FILES
None
.Sh NOTES
Libagdb uses either the system specific narrow or wide character strings for filenames.
To compile libagdb with wide character support use
.Ar ./configure --enable-wide-character-type=yes
 or on Windows define
.Ar WINAPI
 and either
.Ar _UNICODE
 or
.Ar UNICODE

To have other code to determine if libagdb was compiled with wide character support it defines
.Ar LIBAGDB_HAVE_WIDE_CHARACTER_TYPE
 in libagdb/features.h.

libagdb allows to be compiled with chained IO support using libbfio.
The libagdb configure script will automatically detect if a compatible version of libbfio is available.

To have other code to determine if libagdb was compiled with libbfio support it defines
.Ar LIBAGDB_HAVE_BFIO
 in libagdb/features.h.

.Sh BUGS
Please report bugs of any kind to <joachim.metz@gmail.com> or on the project website:
https://code.google.com/p/libagdb/
.Sh AUTHOR
These man pages were written by Joachim Metz.
.Sh COPYRIGHT
Copyright 2014, Joachim Metz <joachim.metz@gmail.com>.
This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.Sh SEE ALSO
the libagdb.h include file
